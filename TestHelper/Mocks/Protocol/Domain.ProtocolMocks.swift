///
/// @Generated by Mockolo
///

import Combine
import Common
@testable import Domain
import Smoothie

public class ClipCommandServiceProtocolMock: ClipCommandServiceProtocol {
    public init() { }

    public private(set) var createCallCount = 0
    public var createHandler: ((ClipRecipe, [ImageContainer], Bool) -> (Result<Clip.Identity, ClipStorageError>))?
    public func create(clip: ClipRecipe, withContainers containers: [ImageContainer], forced: Bool) -> Result<Clip.Identity, ClipStorageError> {
        createCallCount += 1
        if let createHandler = createHandler {
            return createHandler(clip, containers, forced)
        }
        fatalError("createHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createTagWithNameCallCount = 0
    public var createTagWithNameHandler: ((String) -> (Result<Tag.Identity, ClipStorageError>))?
    public func create(tagWithName name: String) -> Result<Tag.Identity, ClipStorageError> {
        createTagWithNameCallCount += 1
        if let createTagWithNameHandler = createTagWithNameHandler {
            return createTagWithNameHandler(name)
        }
        fatalError("createTagWithNameHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createAlbumWithTitleCallCount = 0
    public var createAlbumWithTitleHandler: ((String) -> (Result<Album.Identity, ClipStorageError>))?
    public func create(albumWithTitle: String) -> Result<Album.Identity, ClipStorageError> {
        createAlbumWithTitleCallCount += 1
        if let createAlbumWithTitleHandler = createAlbumWithTitleHandler {
            return createAlbumWithTitleHandler(albumWithTitle)
        }
        fatalError("createAlbumWithTitleHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsCallCount = 0
    public var updateClipsHandler: (([Clip.Identity], Bool) -> (Result<Void, ClipStorageError>))?
    public func updateClips(having ids: [Clip.Identity], byHiding: Bool) -> Result<Void, ClipStorageError> {
        updateClipsCallCount += 1
        if let updateClipsHandler = updateClipsHandler {
            return updateClipsHandler(ids, byHiding)
        }
        fatalError("updateClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingCallCount = 0
    public var updateClipsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byAddingTagsHaving tagIds: [Tag.Identity]) -> Result<Void, ClipStorageError> {
        updateClipsHavingCallCount += 1
        if let updateClipsHavingHandler = updateClipsHavingHandler {
            return updateClipsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingByDeletingTagsHavingCallCount = 0
    public var updateClipsHavingByDeletingTagsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byDeletingTagsHaving tagIds: [Tag.Identity]) -> Result<Void, ClipStorageError> {
        updateClipsHavingByDeletingTagsHavingCallCount += 1
        if let updateClipsHavingByDeletingTagsHavingHandler = updateClipsHavingByDeletingTagsHavingHandler {
            return updateClipsHavingByDeletingTagsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingByDeletingTagsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingByReplacingTagsHavingCallCount = 0
    public var updateClipsHavingByReplacingTagsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byReplacingTagsHaving tagIds: [Tag.Identity]) -> Result<Void, ClipStorageError> {
        updateClipsHavingByReplacingTagsHavingCallCount += 1
        if let updateClipsHavingByReplacingTagsHavingHandler = updateClipsHavingByReplacingTagsHavingHandler {
            return updateClipsHavingByReplacingTagsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingByReplacingTagsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipCallCount = 0
    public var updateClipHandler: ((Clip.Identity, [ClipItem.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateClip(having id: Clip.Identity, byReorderingItemsHaving: [ClipItem.Identity]) -> Result<Void, ClipStorageError> {
        updateClipCallCount += 1
        if let updateClipHandler = updateClipHandler {
            return updateClipHandler(id, byReorderingItemsHaving)
        }
        fatalError("updateClipHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipItemsCallCount = 0
    public var updateClipItemsHandler: (([ClipItem.Identity], URL?) -> (Result<Void, ClipStorageError>))?
    public func updateClipItems(having ids: [ClipItem.Identity], byUpdatingSiteUrl: URL?) -> Result<Void, ClipStorageError> {
        updateClipItemsCallCount += 1
        if let updateClipItemsHandler = updateClipItemsHandler {
            return updateClipItemsHandler(ids, byUpdatingSiteUrl)
        }
        fatalError("updateClipItemsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumCallCount = 0
    public var updateAlbumHandler: ((Album.Identity, [Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byAddingClipsHaving clipIds: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumCallCount += 1
        if let updateAlbumHandler = updateAlbumHandler {
            return updateAlbumHandler(albumId, clipIds)
        }
        fatalError("updateAlbumHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingCallCount = 0
    public var updateAlbumHavingHandler: ((Album.Identity, [Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byDeletingClipsHaving clipIds: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumHavingCallCount += 1
        if let updateAlbumHavingHandler = updateAlbumHavingHandler {
            return updateAlbumHavingHandler(albumId, clipIds)
        }
        fatalError("updateAlbumHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingByReorderingClipsHavingCallCount = 0
    public var updateAlbumHavingByReorderingClipsHavingHandler: ((Album.Identity, [Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byReorderingClipsHaving clipIds: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumHavingByReorderingClipsHavingCallCount += 1
        if let updateAlbumHavingByReorderingClipsHavingHandler = updateAlbumHavingByReorderingClipsHavingHandler {
            return updateAlbumHavingByReorderingClipsHavingHandler(albumId, clipIds)
        }
        fatalError("updateAlbumHavingByReorderingClipsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingTitleToCallCount = 0
    public var updateAlbumHavingTitleToHandler: ((Album.Identity, String) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, titleTo title: String) -> Result<Void, ClipStorageError> {
        updateAlbumHavingTitleToCallCount += 1
        if let updateAlbumHavingTitleToHandler = updateAlbumHavingTitleToHandler {
            return updateAlbumHavingTitleToHandler(albumId, title)
        }
        fatalError("updateAlbumHavingTitleToHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingByHidingCallCount = 0
    public var updateAlbumHavingByHidingHandler: ((Album.Identity, Bool) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byHiding: Bool) -> Result<Void, ClipStorageError> {
        updateAlbumHavingByHidingCallCount += 1
        if let updateAlbumHavingByHidingHandler = updateAlbumHavingByHidingHandler {
            return updateAlbumHavingByHidingHandler(albumId, byHiding)
        }
        fatalError("updateAlbumHavingByHidingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumsCallCount = 0
    public var updateAlbumsHandler: (([Album.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbums(byReordering albumIds: [Album.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumsCallCount += 1
        if let updateAlbumsHandler = updateAlbumsHandler {
            return updateAlbumsHandler(albumIds)
        }
        fatalError("updateAlbumsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateTagCallCount = 0
    public var updateTagHandler: ((Tag.Identity, String) -> (Result<Void, ClipStorageError>))?
    public func updateTag(having id: Tag.Identity, nameTo name: String) -> Result<Void, ClipStorageError> {
        updateTagCallCount += 1
        if let updateTagHandler = updateTagHandler {
            return updateTagHandler(id, name)
        }
        fatalError("updateTagHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateTagHavingCallCount = 0
    public var updateTagHavingHandler: ((Tag.Identity, Bool) -> (Result<Void, ClipStorageError>))?
    public func updateTag(having id: Tag.Identity, byHiding: Bool) -> Result<Void, ClipStorageError> {
        updateTagHavingCallCount += 1
        if let updateTagHavingHandler = updateTagHavingHandler {
            return updateTagHavingHandler(id, byHiding)
        }
        fatalError("updateTagHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var purgeClipItemsCallCount = 0
    public var purgeClipItemsHandler: ((Clip.Identity) -> (Result<Void, ClipStorageError>))?
    public func purgeClipItems(forClipHaving id: Clip.Identity) -> Result<Void, ClipStorageError> {
        purgeClipItemsCallCount += 1
        if let purgeClipItemsHandler = purgeClipItemsHandler {
            return purgeClipItemsHandler(id)
        }
        fatalError("purgeClipItemsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var mergeClipItemsCallCount = 0
    public var mergeClipItemsHandler: (([ClipItem.Identity], [Tag.Identity], [Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func mergeClipItems(itemIds: [ClipItem.Identity], tagIds: [Tag.Identity], inClipsHaving clipIds: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        mergeClipItemsCallCount += 1
        if let mergeClipItemsHandler = mergeClipItemsHandler {
            return mergeClipItemsHandler(itemIds, tagIds, clipIds)
        }
        fatalError("mergeClipItemsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteClipsCallCount = 0
    public var deleteClipsHandler: (([Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func deleteClips(having ids: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        deleteClipsCallCount += 1
        if let deleteClipsHandler = deleteClipsHandler {
            return deleteClipsHandler(ids)
        }
        fatalError("deleteClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteClipItemCallCount = 0
    public var deleteClipItemHandler: ((ClipItem) -> (Result<Void, ClipStorageError>))?
    public func deleteClipItem(_ item: ClipItem) -> Result<Void, ClipStorageError> {
        deleteClipItemCallCount += 1
        if let deleteClipItemHandler = deleteClipItemHandler {
            return deleteClipItemHandler(item)
        }
        fatalError("deleteClipItemHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteAlbumCallCount = 0
    public var deleteAlbumHandler: ((Album.Identity) -> (Result<Void, ClipStorageError>))?
    public func deleteAlbum(having id: Album.Identity) -> Result<Void, ClipStorageError> {
        deleteAlbumCallCount += 1
        if let deleteAlbumHandler = deleteAlbumHandler {
            return deleteAlbumHandler(id)
        }
        fatalError("deleteAlbumHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteTagsCallCount = 0
    public var deleteTagsHandler: (([Tag.Identity]) -> (Result<Void, ClipStorageError>))?
    public func deleteTags(having ids: [Tag.Identity]) -> Result<Void, ClipStorageError> {
        deleteTagsCallCount += 1
        if let deleteTagsHandler = deleteTagsHandler {
            return deleteTagsHandler(ids)
        }
        fatalError("deleteTagsHandler returns can't have a default value thus its handler must be set")
    }
}

public class ClipQueryServiceProtocolMock: ClipQueryServiceProtocol {
    public init() { }

    public private(set) var searchClipsCallCount = 0
    public var searchClipsHandler: ((ClipSearchQuery) -> (Result<[Clip], ClipStorageError>))?
    public func searchClips(query: ClipSearchQuery) -> Result<[Clip], ClipStorageError> {
        searchClipsCallCount += 1
        if let searchClipsHandler = searchClipsHandler {
            return searchClipsHandler(query)
        }
        fatalError("searchClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var searchAlbumsCallCount = 0
    public var searchAlbumsHandler: ((String, Bool, Int) -> (Result<[Album], ClipStorageError>))?
    public func searchAlbums(containingTitle title: String, includesHiddenItems: Bool, limit: Int) -> Result<[Album], ClipStorageError> {
        searchAlbumsCallCount += 1
        if let searchAlbumsHandler = searchAlbumsHandler {
            return searchAlbumsHandler(title, includesHiddenItems, limit)
        }
        fatalError("searchAlbumsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var searchTagsCallCount = 0
    public var searchTagsHandler: ((String, Bool, Int) -> (Result<[Tag], ClipStorageError>))?
    public func searchTags(containingName name: String, includesHiddenItems: Bool, limit: Int) -> Result<[Tag], ClipStorageError> {
        searchTagsCallCount += 1
        if let searchTagsHandler = searchTagsHandler {
            return searchTagsHandler(name, includesHiddenItems, limit)
        }
        fatalError("searchTagsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var readClipAndTagsCallCount = 0
    public var readClipAndTagsHandler: (([Clip.Identity]) -> (Result<([Clip], [Tag]), ClipStorageError>))?
    public func readClipAndTags(for clipIds: [Clip.Identity]) -> Result<([Clip], [Tag]), ClipStorageError> {
        readClipAndTagsCallCount += 1
        if let readClipAndTagsHandler = readClipAndTagsHandler {
            return readClipAndTagsHandler(clipIds)
        }
        fatalError("readClipAndTagsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryClipCallCount = 0
    public var queryClipHandler: ((Clip.Identity) -> (Result<ClipQuery, ClipStorageError>))?
    public func queryClip(having id: Clip.Identity) -> Result<ClipQuery, ClipStorageError> {
        queryClipCallCount += 1
        if let queryClipHandler = queryClipHandler {
            return queryClipHandler(id)
        }
        fatalError("queryClipHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryClipItemsCallCount = 0
    public var queryClipItemsHandler: ((Clip.Identity) -> (Result<ClipItemListQuery, ClipStorageError>))?
    public func queryClipItems(inClipHaving id: Clip.Identity) -> Result<ClipItemListQuery, ClipStorageError> {
        queryClipItemsCallCount += 1
        if let queryClipItemsHandler = queryClipItemsHandler {
            return queryClipItemsHandler(id)
        }
        fatalError("queryClipItemsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryClipItemCallCount = 0
    public var queryClipItemHandler: ((ClipItem.Identity) -> (Result<ClipItemQuery, ClipStorageError>))?
    public func queryClipItem(having id: ClipItem.Identity) -> Result<ClipItemQuery, ClipStorageError> {
        queryClipItemCallCount += 1
        if let queryClipItemHandler = queryClipItemHandler {
            return queryClipItemHandler(id)
        }
        fatalError("queryClipItemHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryAllClipsCallCount = 0
    public var queryAllClipsHandler: (() -> (Result<ClipListQuery, ClipStorageError>))?
    public func queryAllClips() -> Result<ClipListQuery, ClipStorageError> {
        queryAllClipsCallCount += 1
        if let queryAllClipsHandler = queryAllClipsHandler {
            return queryAllClipsHandler()
        }
        fatalError("queryAllClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryAllListingClipsCallCount = 0
    public var queryAllListingClipsHandler: (() -> (Result<ListingClipListQuery, ClipStorageError>))?
    public func queryAllListingClips() -> Result<ListingClipListQuery, ClipStorageError> {
        queryAllListingClipsCallCount += 1
        if let queryAllListingClipsHandler = queryAllListingClipsHandler {
            return queryAllListingClipsHandler()
        }
        fatalError("queryAllListingClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryUncategorizedClipsCallCount = 0
    public var queryUncategorizedClipsHandler: (() -> (Result<ClipListQuery, ClipStorageError>))?
    public func queryUncategorizedClips() -> Result<ClipListQuery, ClipStorageError> {
        queryUncategorizedClipsCallCount += 1
        if let queryUncategorizedClipsHandler = queryUncategorizedClipsHandler {
            return queryUncategorizedClipsHandler()
        }
        fatalError("queryUncategorizedClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryTagsCallCount = 0
    public var queryTagsHandler: ((Clip.Identity) -> (Result<TagListQuery, ClipStorageError>))?
    public func queryTags(forClipHaving clipId: Clip.Identity) -> Result<TagListQuery, ClipStorageError> {
        queryTagsCallCount += 1
        if let queryTagsHandler = queryTagsHandler {
            return queryTagsHandler(clipId)
        }
        fatalError("queryTagsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryClipsCallCount = 0
    public var queryClipsHandler: ((ClipSearchQuery) -> (Result<ClipListQuery, ClipStorageError>))?
    public func queryClips(query: ClipSearchQuery) -> Result<ClipListQuery, ClipStorageError> {
        queryClipsCallCount += 1
        if let queryClipsHandler = queryClipsHandler {
            return queryClipsHandler(query)
        }
        fatalError("queryClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryClipsTaggedCallCount = 0
    public var queryClipsTaggedHandler: ((Tag) -> (Result<ClipListQuery, ClipStorageError>))?
    public func queryClips(tagged tag: Tag) -> Result<ClipListQuery, ClipStorageError> {
        queryClipsTaggedCallCount += 1
        if let queryClipsTaggedHandler = queryClipsTaggedHandler {
            return queryClipsTaggedHandler(tag)
        }
        fatalError("queryClipsTaggedHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryClipsTaggedTagIdentityCallCount = 0
    public var queryClipsTaggedTagIdentityHandler: ((Tag.Identity) -> (Result<ClipListQuery, ClipStorageError>))?
    public func queryClips(tagged tagId: Tag.Identity) -> Result<ClipListQuery, ClipStorageError> {
        queryClipsTaggedTagIdentityCallCount += 1
        if let queryClipsTaggedTagIdentityHandler = queryClipsTaggedTagIdentityHandler {
            return queryClipsTaggedTagIdentityHandler(tagId)
        }
        fatalError("queryClipsTaggedTagIdentityHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryAlbumCallCount = 0
    public var queryAlbumHandler: ((Album.Identity) -> (Result<AlbumQuery, ClipStorageError>))?
    public func queryAlbum(having id: Album.Identity) -> Result<AlbumQuery, ClipStorageError> {
        queryAlbumCallCount += 1
        if let queryAlbumHandler = queryAlbumHandler {
            return queryAlbumHandler(id)
        }
        fatalError("queryAlbumHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryAllAlbumsCallCount = 0
    public var queryAllAlbumsHandler: (() -> (Result<AlbumListQuery, ClipStorageError>))?
    public func queryAllAlbums() -> Result<AlbumListQuery, ClipStorageError> {
        queryAllAlbumsCallCount += 1
        if let queryAllAlbumsHandler = queryAllAlbumsHandler {
            return queryAllAlbumsHandler()
        }
        fatalError("queryAllAlbumsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var queryAllTagsCallCount = 0
    public var queryAllTagsHandler: (() -> (Result<TagListQuery, ClipStorageError>))?
    public func queryAllTags() -> Result<TagListQuery, ClipStorageError> {
        queryAllTagsCallCount += 1
        if let queryAllTagsHandler = queryAllTagsHandler {
            return queryAllTagsHandler()
        }
        fatalError("queryAllTagsHandler returns can't have a default value thus its handler must be set")
    }
}

public class ClipReferencesIntegrityValidationServiceProtocolMock: ClipReferencesIntegrityValidationServiceProtocol {
    public init() { }

    public private(set) var validateAndFixIntegrityIfNeededCallCount = 0
    public var validateAndFixIntegrityIfNeededHandler: (() -> Void)?
    public func validateAndFixIntegrityIfNeeded() {
        validateAndFixIntegrityIfNeededCallCount += 1
        if let validateAndFixIntegrityIfNeededHandler = validateAndFixIntegrityIfNeededHandler {
            validateAndFixIntegrityIfNeededHandler()
        }
    }
}

public class ClipStorageProtocolMock: ClipStorageProtocol {
    public init() { }
    public init(isInTransaction: Bool = false) {
        self.isInTransaction = isInTransaction
    }

    public private(set) var isInTransactionSetCallCount = 0
    public var isInTransaction: Bool = false { didSet { isInTransactionSetCallCount += 1 } }

    public private(set) var beginTransactionCallCount = 0
    public var beginTransactionHandler: (() throws -> Void)?
    public func beginTransaction() throws {
        beginTransactionCallCount += 1
        if let beginTransactionHandler = beginTransactionHandler {
            try beginTransactionHandler()
        }
    }

    public private(set) var commitTransactionCallCount = 0
    public var commitTransactionHandler: (() throws -> Void)?
    public func commitTransaction() throws {
        commitTransactionCallCount += 1
        if let commitTransactionHandler = commitTransactionHandler {
            try commitTransactionHandler()
        }
    }

    public private(set) var cancelTransactionIfNeededCallCount = 0
    public var cancelTransactionIfNeededHandler: (() throws -> Void)?
    public func cancelTransactionIfNeeded() throws {
        cancelTransactionIfNeededCallCount += 1
        if let cancelTransactionIfNeededHandler = cancelTransactionIfNeededHandler {
            try cancelTransactionIfNeededHandler()
        }
    }

    public private(set) var readAllClipsCallCount = 0
    public var readAllClipsHandler: (() -> (Result<[Clip], ClipStorageError>))?
    public func readAllClips() -> Result<[Clip], ClipStorageError> {
        readAllClipsCallCount += 1
        if let readAllClipsHandler = readAllClipsHandler {
            return readAllClipsHandler()
        }
        fatalError("readAllClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var readAllTagsCallCount = 0
    public var readAllTagsHandler: (() -> (Result<[Tag], ClipStorageError>))?
    public func readAllTags() -> Result<[Tag], ClipStorageError> {
        readAllTagsCallCount += 1
        if let readAllTagsHandler = readAllTagsHandler {
            return readAllTagsHandler()
        }
        fatalError("readAllTagsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var readTagsCallCount = 0
    public var readTagsHandler: ((Clip.Identity) -> (Result<[Tag], ClipStorageError>))?
    public func readTags(forClipHaving clipId: Clip.Identity) -> Result<[Tag], ClipStorageError> {
        readTagsCallCount += 1
        if let readTagsHandler = readTagsHandler {
            return readTagsHandler(clipId)
        }
        fatalError("readTagsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var readClipItemsCallCount = 0
    public var readClipItemsHandler: (([ClipItem.Identity]) -> (Result<[ClipItem], ClipStorageError>))?
    public func readClipItems(having: [ClipItem.Identity]) -> Result<[ClipItem], ClipStorageError> {
        readClipItemsCallCount += 1
        if let readClipItemsHandler = readClipItemsHandler {
            return readClipItemsHandler(having)
        }
        fatalError("readClipItemsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var readAlbumIdsCallCount = 0
    public var readAlbumIdsHandler: (([Clip.Identity]) -> (Result<[Album.Identity], ClipStorageError>))?
    public func readAlbumIds(containsClipsHaving: [Clip.Identity]) -> Result<[Album.Identity], ClipStorageError> {
        readAlbumIdsCallCount += 1
        if let readAlbumIdsHandler = readAlbumIdsHandler {
            return readAlbumIdsHandler(containsClipsHaving)
        }
        fatalError("readAlbumIdsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createCallCount = 0
    public var createHandler: ((ClipRecipe) -> (Result<Clip, ClipStorageError>))?
    public func create(clip: ClipRecipe) -> Result<Clip, ClipStorageError> {
        createCallCount += 1
        if let createHandler = createHandler {
            return createHandler(clip)
        }
        fatalError("createHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createTagWithNameCallCount = 0
    public var createTagWithNameHandler: ((String) -> (Result<Tag, ClipStorageError>))?
    public func create(tagWithName name: String) -> Result<Tag, ClipStorageError> {
        createTagWithNameCallCount += 1
        if let createTagWithNameHandler = createTagWithNameHandler {
            return createTagWithNameHandler(name)
        }
        fatalError("createTagWithNameHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createTagCallCount = 0
    public var createTagHandler: ((Tag) -> (Result<Tag, ClipStorageError>))?
    public func create(_ tag: Tag) -> Result<Tag, ClipStorageError> {
        createTagCallCount += 1
        if let createTagHandler = createTagHandler {
            return createTagHandler(tag)
        }
        fatalError("createTagHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createAlbumWithTitleCallCount = 0
    public var createAlbumWithTitleHandler: ((String) -> (Result<Album, ClipStorageError>))?
    public func create(albumWithTitle: String) -> Result<Album, ClipStorageError> {
        createAlbumWithTitleCallCount += 1
        if let createAlbumWithTitleHandler = createAlbumWithTitleHandler {
            return createAlbumWithTitleHandler(albumWithTitle)
        }
        fatalError("createAlbumWithTitleHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsCallCount = 0
    public var updateClipsHandler: (([Clip.Identity], Bool) -> (Result<[Clip], ClipStorageError>))?
    public func updateClips(having ids: [Clip.Identity], byHiding: Bool) -> Result<[Clip], ClipStorageError> {
        updateClipsCallCount += 1
        if let updateClipsHandler = updateClipsHandler {
            return updateClipsHandler(ids, byHiding)
        }
        fatalError("updateClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingCallCount = 0
    public var updateClipsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<[Clip], ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byAddingTagsHaving tagIds: [Tag.Identity]) -> Result<[Clip], ClipStorageError> {
        updateClipsHavingCallCount += 1
        if let updateClipsHavingHandler = updateClipsHavingHandler {
            return updateClipsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingByDeletingTagsHavingCallCount = 0
    public var updateClipsHavingByDeletingTagsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<[Clip], ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byDeletingTagsHaving tagIds: [Tag.Identity]) -> Result<[Clip], ClipStorageError> {
        updateClipsHavingByDeletingTagsHavingCallCount += 1
        if let updateClipsHavingByDeletingTagsHavingHandler = updateClipsHavingByDeletingTagsHavingHandler {
            return updateClipsHavingByDeletingTagsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingByDeletingTagsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipsHavingByReplacingTagsHavingCallCount = 0
    public var updateClipsHavingByReplacingTagsHavingHandler: (([Clip.Identity], [Tag.Identity]) -> (Result<[Clip], ClipStorageError>))?
    public func updateClips(having clipIds: [Clip.Identity], byReplacingTagsHaving tagIds: [Tag.Identity]) -> Result<[Clip], ClipStorageError> {
        updateClipsHavingByReplacingTagsHavingCallCount += 1
        if let updateClipsHavingByReplacingTagsHavingHandler = updateClipsHavingByReplacingTagsHavingHandler {
            return updateClipsHavingByReplacingTagsHavingHandler(clipIds, tagIds)
        }
        fatalError("updateClipsHavingByReplacingTagsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipCallCount = 0
    public var updateClipHandler: ((Clip.Identity, [ClipItem.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateClip(having clipId: Clip.Identity, byReorderingItemsHaving itemIds: [ClipItem.Identity]) -> Result<Void, ClipStorageError> {
        updateClipCallCount += 1
        if let updateClipHandler = updateClipHandler {
            return updateClipHandler(clipId, itemIds)
        }
        fatalError("updateClipHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateClipItemsCallCount = 0
    public var updateClipItemsHandler: (([ClipItem.Identity], URL?) -> (Result<Void, ClipStorageError>))?
    public func updateClipItems(having ids: [ClipItem.Identity], byUpdatingSiteUrl: URL?) -> Result<Void, ClipStorageError> {
        updateClipItemsCallCount += 1
        if let updateClipItemsHandler = updateClipItemsHandler {
            return updateClipItemsHandler(ids, byUpdatingSiteUrl)
        }
        fatalError("updateClipItemsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumCallCount = 0
    public var updateAlbumHandler: ((Album.Identity, [Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byAddingClipsHaving clipIds: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumCallCount += 1
        if let updateAlbumHandler = updateAlbumHandler {
            return updateAlbumHandler(albumId, clipIds)
        }
        fatalError("updateAlbumHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingCallCount = 0
    public var updateAlbumHavingHandler: ((Album.Identity, [Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byDeletingClipsHaving clipIds: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumHavingCallCount += 1
        if let updateAlbumHavingHandler = updateAlbumHavingHandler {
            return updateAlbumHavingHandler(albumId, clipIds)
        }
        fatalError("updateAlbumHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingByReorderingClipsHavingCallCount = 0
    public var updateAlbumHavingByReorderingClipsHavingHandler: ((Album.Identity, [Clip.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byReorderingClipsHaving clipIds: [Clip.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumHavingByReorderingClipsHavingCallCount += 1
        if let updateAlbumHavingByReorderingClipsHavingHandler = updateAlbumHavingByReorderingClipsHavingHandler {
            return updateAlbumHavingByReorderingClipsHavingHandler(albumId, clipIds)
        }
        fatalError("updateAlbumHavingByReorderingClipsHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingTitleToCallCount = 0
    public var updateAlbumHavingTitleToHandler: ((Album.Identity, String) -> (Result<Album, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, titleTo title: String) -> Result<Album, ClipStorageError> {
        updateAlbumHavingTitleToCallCount += 1
        if let updateAlbumHavingTitleToHandler = updateAlbumHavingTitleToHandler {
            return updateAlbumHavingTitleToHandler(albumId, title)
        }
        fatalError("updateAlbumHavingTitleToHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumHavingByHidingCallCount = 0
    public var updateAlbumHavingByHidingHandler: ((Album.Identity, Bool) -> (Result<Album, ClipStorageError>))?
    public func updateAlbum(having albumId: Album.Identity, byHiding: Bool) -> Result<Album, ClipStorageError> {
        updateAlbumHavingByHidingCallCount += 1
        if let updateAlbumHavingByHidingHandler = updateAlbumHavingByHidingHandler {
            return updateAlbumHavingByHidingHandler(albumId, byHiding)
        }
        fatalError("updateAlbumHavingByHidingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateAlbumsCallCount = 0
    public var updateAlbumsHandler: (([Album.Identity]) -> (Result<Void, ClipStorageError>))?
    public func updateAlbums(byReordering albumIds: [Album.Identity]) -> Result<Void, ClipStorageError> {
        updateAlbumsCallCount += 1
        if let updateAlbumsHandler = updateAlbumsHandler {
            return updateAlbumsHandler(albumIds)
        }
        fatalError("updateAlbumsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateTagCallCount = 0
    public var updateTagHandler: ((Tag.Identity, String) -> (Result<Tag, ClipStorageError>))?
    public func updateTag(having id: Tag.Identity, nameTo name: String) -> Result<Tag, ClipStorageError> {
        updateTagCallCount += 1
        if let updateTagHandler = updateTagHandler {
            return updateTagHandler(id, name)
        }
        fatalError("updateTagHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateTagHavingCallCount = 0
    public var updateTagHavingHandler: ((Tag.Identity, Bool) -> (Result<Tag, ClipStorageError>))?
    public func updateTag(having id: Tag.Identity, byHiding: Bool) -> Result<Tag, ClipStorageError> {
        updateTagHavingCallCount += 1
        if let updateTagHavingHandler = updateTagHavingHandler {
            return updateTagHavingHandler(id, byHiding)
        }
        fatalError("updateTagHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteClipsCallCount = 0
    public var deleteClipsHandler: (([Clip.Identity]) -> (Result<[Clip], ClipStorageError>))?
    public func deleteClips(having ids: [Clip.Identity]) -> Result<[Clip], ClipStorageError> {
        deleteClipsCallCount += 1
        if let deleteClipsHandler = deleteClipsHandler {
            return deleteClipsHandler(ids)
        }
        fatalError("deleteClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteClipItemCallCount = 0
    public var deleteClipItemHandler: ((ClipItem.Identity) -> (Result<ClipItem, ClipStorageError>))?
    public func deleteClipItem(having id: ClipItem.Identity) -> Result<ClipItem, ClipStorageError> {
        deleteClipItemCallCount += 1
        if let deleteClipItemHandler = deleteClipItemHandler {
            return deleteClipItemHandler(id)
        }
        fatalError("deleteClipItemHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteAlbumCallCount = 0
    public var deleteAlbumHandler: ((Album.Identity) -> (Result<Album, ClipStorageError>))?
    public func deleteAlbum(having id: Album.Identity) -> Result<Album, ClipStorageError> {
        deleteAlbumCallCount += 1
        if let deleteAlbumHandler = deleteAlbumHandler {
            return deleteAlbumHandler(id)
        }
        fatalError("deleteAlbumHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteTagsCallCount = 0
    public var deleteTagsHandler: (([Tag.Identity]) -> (Result<[Tag], ClipStorageError>))?
    public func deleteTags(having ids: [Tag.Identity]) -> Result<[Tag], ClipStorageError> {
        deleteTagsCallCount += 1
        if let deleteTagsHandler = deleteTagsHandler {
            return deleteTagsHandler(ids)
        }
        fatalError("deleteTagsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteAllCallCount = 0
    public var deleteAllHandler: (() -> (Result<Void, ClipStorageError>))?
    public func deleteAll() -> Result<Void, ClipStorageError> {
        deleteAllCallCount += 1
        if let deleteAllHandler = deleteAllHandler {
            return deleteAllHandler()
        }
        fatalError("deleteAllHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deduplicateTagCallCount = 0
    public var deduplicateTagHandler: ((ObjectID) -> ([Domain.Tag.Identity]))?
    public func deduplicateTag(for id: ObjectID) -> [Domain.Tag.Identity] {
        deduplicateTagCallCount += 1
        if let deduplicateTagHandler = deduplicateTagHandler {
            return deduplicateTagHandler(id)
        }
        return [Domain.Tag.Identity]()
    }
}

public class ImageStorageProtocolMock: ImageStorageProtocol {
    public init() { }
    public init(isInTransaction: Bool = false) {
        self.isInTransaction = isInTransaction
    }

    public private(set) var isInTransactionSetCallCount = 0
    public var isInTransaction: Bool = false { didSet { isInTransactionSetCallCount += 1 } }

    public private(set) var beginTransactionCallCount = 0
    public var beginTransactionHandler: (() throws -> Void)?
    public func beginTransaction() throws {
        beginTransactionCallCount += 1
        if let beginTransactionHandler = beginTransactionHandler {
            try beginTransactionHandler()
        }
    }

    public private(set) var commitTransactionCallCount = 0
    public var commitTransactionHandler: (() throws -> Void)?
    public func commitTransaction() throws {
        commitTransactionCallCount += 1
        if let commitTransactionHandler = commitTransactionHandler {
            try commitTransactionHandler()
        }
    }

    public private(set) var cancelTransactionIfNeededCallCount = 0
    public var cancelTransactionIfNeededHandler: (() throws -> Void)?
    public func cancelTransactionIfNeeded() throws {
        cancelTransactionIfNeededCallCount += 1
        if let cancelTransactionIfNeededHandler = cancelTransactionIfNeededHandler {
            try cancelTransactionIfNeededHandler()
        }
    }

    public private(set) var createCallCount = 0
    public var createHandler: ((Data, ImageContainer.Identity) throws -> Void)?
    public func create(_ image: Data, id: ImageContainer.Identity) throws {
        createCallCount += 1
        if let createHandler = createHandler {
            try createHandler(image, id)
        }
    }

    public private(set) var deleteCallCount = 0
    public var deleteHandler: ((ImageContainer.Identity) throws -> Void)?
    public func delete(having id: ImageContainer.Identity) throws {
        deleteCallCount += 1
        if let deleteHandler = deleteHandler {
            try deleteHandler(id)
        }
    }

    public private(set) var existsCallCount = 0
    public var existsHandler: ((ImageContainer.Identity) throws -> (Bool))?
    public func exists(having id: ImageContainer.Identity) throws -> Bool {
        existsCallCount += 1
        if let existsHandler = existsHandler {
            return try existsHandler(id)
        }
        return false
    }
}

public class ReferenceClipStorageProtocolMock: ReferenceClipStorageProtocol {
    public init() { }
    public init(isInTransaction: Bool = false) {
        self.isInTransaction = isInTransaction
    }

    public private(set) var isInTransactionSetCallCount = 0
    public var isInTransaction: Bool = false { didSet { isInTransactionSetCallCount += 1 } }

    public private(set) var beginTransactionCallCount = 0
    public var beginTransactionHandler: (() throws -> Void)?
    public func beginTransaction() throws {
        beginTransactionCallCount += 1
        if let beginTransactionHandler = beginTransactionHandler {
            try beginTransactionHandler()
        }
    }

    public private(set) var commitTransactionCallCount = 0
    public var commitTransactionHandler: (() throws -> Void)?
    public func commitTransaction() throws {
        commitTransactionCallCount += 1
        if let commitTransactionHandler = commitTransactionHandler {
            try commitTransactionHandler()
        }
    }

    public private(set) var cancelTransactionIfNeededCallCount = 0
    public var cancelTransactionIfNeededHandler: (() throws -> Void)?
    public func cancelTransactionIfNeeded() throws {
        cancelTransactionIfNeededCallCount += 1
        if let cancelTransactionIfNeededHandler = cancelTransactionIfNeededHandler {
            try cancelTransactionIfNeededHandler()
        }
    }

    public private(set) var readAllDirtyTagsCallCount = 0
    public var readAllDirtyTagsHandler: (() -> (Result<[ReferenceTag], ClipStorageError>))?
    public func readAllDirtyTags() -> Result<[ReferenceTag], ClipStorageError> {
        readAllDirtyTagsCallCount += 1
        if let readAllDirtyTagsHandler = readAllDirtyTagsHandler {
            return readAllDirtyTagsHandler()
        }
        fatalError("readAllDirtyTagsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var readAllTagsCallCount = 0
    public var readAllTagsHandler: (() -> (Result<[ReferenceTag], ClipStorageError>))?
    public func readAllTags() -> Result<[ReferenceTag], ClipStorageError> {
        readAllTagsCallCount += 1
        if let readAllTagsHandler = readAllTagsHandler {
            return readAllTagsHandler()
        }
        fatalError("readAllTagsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createCallCount = 0
    public var createHandler: ((ReferenceTag) -> (Result<Void, ClipStorageError>))?
    public func create(tag: ReferenceTag) -> Result<Void, ClipStorageError> {
        createCallCount += 1
        if let createHandler = createHandler {
            return createHandler(tag)
        }
        fatalError("createHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateTagCallCount = 0
    public var updateTagHandler: ((ReferenceTag.Identity, String) -> (Result<Void, ClipStorageError>))?
    public func updateTag(having id: ReferenceTag.Identity, nameTo name: String) -> Result<Void, ClipStorageError> {
        updateTagCallCount += 1
        if let updateTagHandler = updateTagHandler {
            return updateTagHandler(id, name)
        }
        fatalError("updateTagHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateTagHavingCallCount = 0
    public var updateTagHavingHandler: ((ReferenceTag.Identity, Bool) -> (Result<Void, ClipStorageError>))?
    public func updateTag(having id: ReferenceTag.Identity, byHiding isHidden: Bool) -> Result<Void, ClipStorageError> {
        updateTagHavingCallCount += 1
        if let updateTagHavingHandler = updateTagHavingHandler {
            return updateTagHavingHandler(id, isHidden)
        }
        fatalError("updateTagHavingHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var updateTagsCallCount = 0
    public var updateTagsHandler: (([ReferenceTag.Identity], Bool) -> (Result<Void, ClipStorageError>))?
    public func updateTags(having ids: [ReferenceTag.Identity], toDirty isDirty: Bool) -> Result<Void, ClipStorageError> {
        updateTagsCallCount += 1
        if let updateTagsHandler = updateTagsHandler {
            return updateTagsHandler(ids, isDirty)
        }
        fatalError("updateTagsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteTagsCallCount = 0
    public var deleteTagsHandler: (([ReferenceTag.Identity]) -> (Result<Void, ClipStorageError>))?
    public func deleteTags(having ids: [ReferenceTag.Identity]) -> Result<Void, ClipStorageError> {
        deleteTagsCallCount += 1
        if let deleteTagsHandler = deleteTagsHandler {
            return deleteTagsHandler(ids)
        }
        fatalError("deleteTagsHandler returns can't have a default value thus its handler must be set")
    }
}

public class StorageCommandQueueMock: StorageCommandQueue {
    public init() { }

    public private(set) var syncCallCount = 0
    public var syncHandler: ((@escaping () -> Any) -> (Any))?
    public func sync<T>(_ block: @escaping () -> T) -> T {
        syncCallCount += 1
        if let syncHandler = syncHandler {
            return syncHandler(block) as! T
        }
        fatalError("syncHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var syncBlockCallCount = 0
    public var syncBlockHandler: ((@escaping () throws -> Any) throws -> (Any))?
    public func sync<T>(_ block: @escaping () throws -> T) throws -> T {
        syncBlockCallCount += 1
        if let syncBlockHandler = syncBlockHandler {
            return try syncBlockHandler(block) as! T
        }
        fatalError("syncBlockHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var asyncCallCount = 0
    public var asyncHandler: ((@escaping () -> Void) -> Void)?
    public func async(_ block: @escaping () -> Void) {
        asyncCallCount += 1
        if let asyncHandler = asyncHandler {
            asyncHandler(block)
        }
    }
}

public class TemporariesPersistServiceObserverMock: TemporariesPersistServiceObserver {
    public init() { }

    public private(set) var temporariesPersistServiceCallCount = 0
    public var temporariesPersistServiceHandler: ((TemporariesPersistService, Int, Int) -> Void)?
    public func temporariesPersistService(_ service: TemporariesPersistService, didStartThe index: Int, outOf count: Int) {
        temporariesPersistServiceCallCount += 1
        if let temporariesPersistServiceHandler = temporariesPersistServiceHandler {
            temporariesPersistServiceHandler(service, index, count)
        }
    }
}

public class TemporaryClipCommandServiceProtocolMock: TemporaryClipCommandServiceProtocol {
    public init() { }

    public private(set) var createCallCount = 0
    public var createHandler: ((ClipRecipe, [ImageContainer], Bool) -> (Result<Clip.Identity, ClipStorageError>))?
    public func create(clip: ClipRecipe, withContainers containers: [ImageContainer], forced: Bool) -> Result<Clip.Identity, ClipStorageError> {
        createCallCount += 1
        if let createHandler = createHandler {
            return createHandler(clip, containers, forced)
        }
        fatalError("createHandler returns can't have a default value thus its handler must be set")
    }
}

public class TemporaryClipStorageProtocolMock: TemporaryClipStorageProtocol {
    public init() { }
    public init(isInTransaction: Bool = false) {
        self.isInTransaction = isInTransaction
    }

    public private(set) var isInTransactionSetCallCount = 0
    public var isInTransaction: Bool = false { didSet { isInTransactionSetCallCount += 1 } }

    public private(set) var beginTransactionCallCount = 0
    public var beginTransactionHandler: (() throws -> Void)?
    public func beginTransaction() throws {
        beginTransactionCallCount += 1
        if let beginTransactionHandler = beginTransactionHandler {
            try beginTransactionHandler()
        }
    }

    public private(set) var commitTransactionCallCount = 0
    public var commitTransactionHandler: (() throws -> Void)?
    public func commitTransaction() throws {
        commitTransactionCallCount += 1
        if let commitTransactionHandler = commitTransactionHandler {
            try commitTransactionHandler()
        }
    }

    public private(set) var cancelTransactionIfNeededCallCount = 0
    public var cancelTransactionIfNeededHandler: (() throws -> Void)?
    public func cancelTransactionIfNeeded() throws {
        cancelTransactionIfNeededCallCount += 1
        if let cancelTransactionIfNeededHandler = cancelTransactionIfNeededHandler {
            try cancelTransactionIfNeededHandler()
        }
    }

    public private(set) var readAllClipsCallCount = 0
    public var readAllClipsHandler: (() -> (Result<[ClipRecipe], ClipStorageError>))?
    public func readAllClips() -> Result<[ClipRecipe], ClipStorageError> {
        readAllClipsCallCount += 1
        if let readAllClipsHandler = readAllClipsHandler {
            return readAllClipsHandler()
        }
        fatalError("readAllClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var createCallCount = 0
    public var createHandler: ((ClipRecipe) -> (Result<ClipRecipe, ClipStorageError>))?
    public func create(clip: ClipRecipe) -> Result<ClipRecipe, ClipStorageError> {
        createCallCount += 1
        if let createHandler = createHandler {
            return createHandler(clip)
        }
        fatalError("createHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteClipsCallCount = 0
    public var deleteClipsHandler: (([Clip.Identity]) -> (Result<[ClipRecipe], ClipStorageError>))?
    public func deleteClips(having ids: [Clip.Identity]) -> Result<[ClipRecipe], ClipStorageError> {
        deleteClipsCallCount += 1
        if let deleteClipsHandler = deleteClipsHandler {
            return deleteClipsHandler(ids)
        }
        fatalError("deleteClipsHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var deleteAllCallCount = 0
    public var deleteAllHandler: (() -> (Result<Void, ClipStorageError>))?
    public func deleteAll() -> Result<Void, ClipStorageError> {
        deleteAllCallCount += 1
        if let deleteAllHandler = deleteAllHandler {
            return deleteAllHandler()
        }
        fatalError("deleteAllHandler returns can't have a default value thus its handler must be set")
    }
}

public class TemporaryImageStorageProtocolMock: TemporaryImageStorageProtocol {
    public init() { }

    public private(set) var imageFileExistsCallCount = 0
    public var imageFileExistsHandler: ((String, Clip.Identity) -> (Bool))?
    public func imageFileExists(named name: String, inClipHaving clipId: Clip.Identity) -> Bool {
        imageFileExistsCallCount += 1
        if let imageFileExistsHandler = imageFileExistsHandler {
            return imageFileExistsHandler(name, clipId)
        }
        return false
    }

    public private(set) var saveCallCount = 0
    public var saveHandler: ((Data, String, Clip.Identity) throws -> Void)?
    public func save(_ image: Data, asName fileName: String, inClipHaving clipId: Clip.Identity) throws {
        saveCallCount += 1
        if let saveHandler = saveHandler {
            try saveHandler(image, fileName, clipId)
        }
    }

    public private(set) var deleteCallCount = 0
    public var deleteHandler: ((String, Clip.Identity) throws -> Void)?
    public func delete(fileName: String, inClipHaving clipId: Clip.Identity) throws {
        deleteCallCount += 1
        if let deleteHandler = deleteHandler {
            try deleteHandler(fileName, clipId)
        }
    }

    public private(set) var deleteAllCallCount = 0
    public var deleteAllHandler: ((Clip.Identity) throws -> Void)?
    public func deleteAll(inClipHaving clipId: Clip.Identity) throws {
        deleteAllCallCount += 1
        if let deleteAllHandler = deleteAllHandler {
            try deleteAllHandler(clipId)
        }
    }

    public private(set) var deleteAll1CallCount = 0
    public var deleteAll1Handler: (() throws -> Void)?
    public func deleteAll() throws {
        deleteAll1CallCount += 1
        if let deleteAll1Handler = deleteAll1Handler {
            try deleteAll1Handler()
        }
    }

    public private(set) var readImageCallCount = 0
    public var readImageHandler: ((String, Clip.Identity) throws -> (Data?))?
    public func readImage(named name: String, inClipHaving clipId: Clip.Identity) throws -> Data? {
        readImageCallCount += 1
        if let readImageHandler = readImageHandler {
            return try readImageHandler(name, clipId)
        }
        return nil
    }
}

public class AlbumListQueryMock: AlbumListQuery {
    public init() { }
    public init(albums: CurrentValueSubject<[Album], Error>) {
        self._albums = albums
    }

    public private(set) var albumsSetCallCount = 0
    private var _albums: CurrentValueSubject<[Album], Error>! { didSet { albumsSetCallCount += 1 } }
    public var albums: CurrentValueSubject<[Album], Error> {
        get { return _albums }
        set { _albums = newValue }
    }
}

public class AlbumQueryMock: AlbumQuery {
    public init() { }
    public init(album: CurrentValueSubject<Album, Error>) {
        self._album = album
    }

    public private(set) var albumSetCallCount = 0
    private var _album: CurrentValueSubject<Album, Error>! { didSet { albumSetCallCount += 1 } }
    public var album: CurrentValueSubject<Album, Error> {
        get { return _album }
        set { _album = newValue }
    }
}

public class ClipItemListQueryMock: ClipItemListQuery {
    public init() { }
    public init(items: CurrentValueSubject<[ClipItem], Error>) {
        self._items = items
    }

    public private(set) var itemsSetCallCount = 0
    private var _items: CurrentValueSubject<[ClipItem], Error>! { didSet { itemsSetCallCount += 1 } }
    public var items: CurrentValueSubject<[ClipItem], Error> {
        get { return _items }
        set { _items = newValue }
    }
}

public class ClipItemQueryMock: ClipItemQuery {
    public init() { }
    public init(clipItem: CurrentValueSubject<ClipItem, Error>) {
        self._clipItem = clipItem
    }

    public private(set) var clipItemSetCallCount = 0
    private var _clipItem: CurrentValueSubject<ClipItem, Error>! { didSet { clipItemSetCallCount += 1 } }
    public var clipItem: CurrentValueSubject<ClipItem, Error> {
        get { return _clipItem }
        set { _clipItem = newValue }
    }
}

public class ClipListQueryMock: ClipListQuery {
    public init() { }
    public init(clips: CurrentValueSubject<[Clip], Error>) {
        self._clips = clips
    }

    public private(set) var clipsSetCallCount = 0
    private var _clips: CurrentValueSubject<[Clip], Error>! { didSet { clipsSetCallCount += 1 } }
    public var clips: CurrentValueSubject<[Clip], Error> {
        get { return _clips }
        set { _clips = newValue }
    }
}

public class ClipQueryMock: ClipQuery {
    public init() { }
    public init(clip: CurrentValueSubject<Clip, Error>) {
        self._clip = clip
    }

    public private(set) var clipSetCallCount = 0
    private var _clip: CurrentValueSubject<Clip, Error>! { didSet { clipSetCallCount += 1 } }
    public var clip: CurrentValueSubject<Clip, Error> {
        get { return _clip }
        set { _clip = newValue }
    }
}

public class CloudUsageContextStorageProtocolMock: CloudUsageContextStorageProtocol {
    public init() { }
    public init(lastLoggedInCloudAccountId: String? = nil) {
        self.lastLoggedInCloudAccountId = lastLoggedInCloudAccountId
    }

    public private(set) var lastLoggedInCloudAccountIdSetCallCount = 0
    public var lastLoggedInCloudAccountId: String? { didSet { lastLoggedInCloudAccountIdSetCallCount += 1 } }

    public private(set) var setCallCount = 0
    public var setHandler: ((String?) -> Void)?
    public func set(lastLoggedInCloudAccountId: String?) {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(lastLoggedInCloudAccountId)
        }
    }
}

public class ListingClipListQueryMock: ListingClipListQuery {
    public init() { }
    public init(clips: CurrentValueSubject<[ListingClip], Error>) {
        self._clips = clips
    }

    public private(set) var clipsSetCallCount = 0
    private var _clips: CurrentValueSubject<[ListingClip], Error>! { didSet { clipsSetCallCount += 1 } }
    public var clips: CurrentValueSubject<[ListingClip], Error> {
        get { return _clips }
        set { _clips = newValue }
    }
}

public class TagListQueryMock: TagListQuery {
    public init() { }
    public init(tags: CurrentValueSubject<[Domain.Tag], Error>) {
        self._tags = tags
    }

    public private(set) var tagsSetCallCount = 0
    private var _tags: CurrentValueSubject<[Domain.Tag], Error>! { didSet { tagsSetCallCount += 1 } }
    public var tags: CurrentValueSubject<[Domain.Tag], Error> {
        get { return _tags }
        set { _tags = newValue }
    }
}

public class TagQueryMock: TagQuery {
    public init() { }
    public init(tag: CurrentValueSubject<Tag, Error>) {
        self._tag = tag
    }

    public private(set) var tagSetCallCount = 0
    private var _tag: CurrentValueSubject<Tag, Error>! { didSet { tagSetCallCount += 1 } }
    public var tag: CurrentValueSubject<Tag, Error> {
        get { return _tag }
        set { _tag = newValue }
    }
}

public class UserSettingsStorageProtocolMock: UserSettingsStorageProtocol {
    public init() { }
    public init(userInterfaceStyle: AnyPublisher<UserInterfaceStyle, Never>, showHiddenItems: AnyPublisher<Bool, Never>, enabledICloudSync: AnyPublisher<Bool, Never>) {
        self._userInterfaceStyle = userInterfaceStyle
        self._showHiddenItems = showHiddenItems
        self._enabledICloudSync = enabledICloudSync
    }

    public private(set) var userInterfaceStyleSetCallCount = 0
    private var _userInterfaceStyle: AnyPublisher<UserInterfaceStyle, Never>! { didSet { userInterfaceStyleSetCallCount += 1 } }
    public var userInterfaceStyle: AnyPublisher<UserInterfaceStyle, Never> {
        get { return _userInterfaceStyle }
        set { _userInterfaceStyle = newValue }
    }

    public private(set) var showHiddenItemsSetCallCount = 0
    private var _showHiddenItems: AnyPublisher<Bool, Never>! { didSet { showHiddenItemsSetCallCount += 1 } }
    public var showHiddenItems: AnyPublisher<Bool, Never> {
        get { return _showHiddenItems }
        set { _showHiddenItems = newValue }
    }

    public private(set) var enabledICloudSyncSetCallCount = 0
    private var _enabledICloudSync: AnyPublisher<Bool, Never>! { didSet { enabledICloudSyncSetCallCount += 1 } }
    public var enabledICloudSync: AnyPublisher<Bool, Never> {
        get { return _enabledICloudSync }
        set { _enabledICloudSync = newValue }
    }

    public private(set) var readUserInterfaceStyleCallCount = 0
    public var readUserInterfaceStyleHandler: (() -> (UserInterfaceStyle))?
    public func readUserInterfaceStyle() -> UserInterfaceStyle {
        readUserInterfaceStyleCallCount += 1
        if let readUserInterfaceStyleHandler = readUserInterfaceStyleHandler {
            return readUserInterfaceStyleHandler()
        }
        fatalError("readUserInterfaceStyleHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) var readShowHiddenItemsCallCount = 0
    public var readShowHiddenItemsHandler: (() -> (Bool))?
    public func readShowHiddenItems() -> Bool {
        readShowHiddenItemsCallCount += 1
        if let readShowHiddenItemsHandler = readShowHiddenItemsHandler {
            return readShowHiddenItemsHandler()
        }
        return false
    }

    public private(set) var readEnabledICloudSyncCallCount = 0
    public var readEnabledICloudSyncHandler: (() -> (Bool))?
    public func readEnabledICloudSync() -> Bool {
        readEnabledICloudSyncCallCount += 1
        if let readEnabledICloudSyncHandler = readEnabledICloudSyncHandler {
            return readEnabledICloudSyncHandler()
        }
        return false
    }

    public private(set) var setCallCount = 0
    public var setHandler: ((UserInterfaceStyle) -> Void)?
    public func set(userInterfaceStyle: UserInterfaceStyle) {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(userInterfaceStyle)
        }
    }

    public private(set) var setShowHiddenItemsCallCount = 0
    public var setShowHiddenItemsHandler: ((Bool) -> Void)?
    public func set(showHiddenItems: Bool) {
        setShowHiddenItemsCallCount += 1
        if let setShowHiddenItemsHandler = setShowHiddenItemsHandler {
            setShowHiddenItemsHandler(showHiddenItems)
        }
    }

    public private(set) var setEnabledICloudSyncCallCount = 0
    public var setEnabledICloudSyncHandler: ((Bool) -> Void)?
    public func set(enabledICloudSync: Bool) {
        setEnabledICloudSyncCallCount += 1
        if let setEnabledICloudSyncHandler = setEnabledICloudSyncHandler {
            setEnabledICloudSyncHandler(enabledICloudSync)
        }
    }
}

public class ImageQueryServiceProtocolMock: ImageQueryServiceProtocol {
    public init() { }

    public private(set) var readCallCount = 0
    public var readHandler: ((ImageContainer.Identity) throws -> (Data?))?
    public func read(having id: ImageContainer.Identity) throws -> Data? {
        readCallCount += 1
        if let readHandler = readHandler {
            return try readHandler(id)
        }
        return nil
    }
}

public class TemporariesPersistServiceProtocolMock: TemporariesPersistServiceProtocol {
    public init() { }

    public private(set) var setCallCount = 0
    public var setHandler: ((TemporariesPersistServiceObserver) -> Void)?
    public func set(observer: TemporariesPersistServiceObserver) {
        setCallCount += 1
        if let setHandler = setHandler {
            setHandler(observer)
        }
    }

    public private(set) var persistIfNeededCallCount = 0
    public var persistIfNeededHandler: (() -> (Bool))?
    public func persistIfNeeded() -> Bool {
        persistIfNeededCallCount += 1
        if let persistIfNeededHandler = persistIfNeededHandler {
            return persistIfNeededHandler()
        }
        return false
    }
}
