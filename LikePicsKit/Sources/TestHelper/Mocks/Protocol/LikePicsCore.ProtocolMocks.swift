///
/// @Generated by Mockolo
///

import Combine
import Common
import CompositeKit
import Domain
import Environment
import Erik
import Foundation
@testable import LikePicsCore
import LikePicsUIKit
import Smoothie
import UIKit
import WebKit

public class ClipStorableMock: ClipStorable {
    public init() { }

    public private(set) var createCallCount = 0
    public var createHandler: ((ClipRecipe, [ImageContainer], Bool) -> (Result<Clip.Identity, ClipStorageError>))?
    public func create(clip: ClipRecipe, withContainers containers: [ImageContainer], forced: Bool) -> Result<Clip.Identity, ClipStorageError> {
        createCallCount += 1
        if let createHandler = createHandler {
            return createHandler(clip, containers, forced)
        }
        fatalError("createHandler returns can't have a default value thus its handler must be set")
    }
}

public class WebImageProviderMock: WebImageProvider {
    public init() { }

    public private(set) static var isProvidingCallCount = 0
    public static var isProvidingHandler: ((URL) -> (Bool))?
    public static func isProviding(url: URL) -> Bool {
        isProvidingCallCount += 1
        if let isProvidingHandler = isProvidingHandler {
            return isProvidingHandler(url)
        }
        return false
    }

    public private(set) static var modifyUrlForProcessingCallCount = 0
    public static var modifyUrlForProcessingHandler: ((URL) -> (URL))?
    public static func modifyUrlForProcessing(_ url: URL) -> URL {
        modifyUrlForProcessingCallCount += 1
        if let modifyUrlForProcessingHandler = modifyUrlForProcessingHandler {
            return modifyUrlForProcessingHandler(url)
        }
        return URL(fileURLWithPath: "")
    }

    public private(set) static var shouldPreprocessCallCount = 0
    public static var shouldPreprocessHandler: ((URL) -> (Bool))?
    public static func shouldPreprocess(for url: URL) -> Bool {
        shouldPreprocessCallCount += 1
        if let shouldPreprocessHandler = shouldPreprocessHandler {
            return shouldPreprocessHandler(url)
        }
        return false
    }

    public private(set) static var preprocessCallCount = 0
    public static var preprocessHandler: ((Erik, Document) -> (AnyPublisher<Void, WebImageUrlSetFinderError>))?
    public static func preprocess(_ browser: Erik, document: Document) -> AnyPublisher<Void, WebImageUrlSetFinderError> {
        preprocessCallCount += 1
        if let preprocessHandler = preprocessHandler {
            return preprocessHandler(browser, document)
        }
        fatalError("preprocessHandler returns can't have a default value thus its handler must be set")
    }

    public private(set) static var resolveHighQualityImageUrlCallCount = 0
    public static var resolveHighQualityImageUrlHandler: ((URL) -> (URL?))?
    public static func resolveHighQualityImageUrl(of url: URL) -> URL? {
        resolveHighQualityImageUrlCallCount += 1
        if let resolveHighQualityImageUrlHandler = resolveHighQualityImageUrlHandler {
            return resolveHighQualityImageUrlHandler(url)
        }
        return nil
    }

    public private(set) static var shouldModifyRequestCallCount = 0
    public static var shouldModifyRequestHandler: ((URL) -> (Bool))?
    public static func shouldModifyRequest(for url: URL) -> Bool {
        shouldModifyRequestCallCount += 1
        if let shouldModifyRequestHandler = shouldModifyRequestHandler {
            return shouldModifyRequestHandler(url)
        }
        return false
    }

    public private(set) static var modifyRequestCallCount = 0
    public static var modifyRequestHandler: ((URLRequest) -> (URLRequest))?
    public static func modifyRequest(_ request: URLRequest) -> URLRequest {
        modifyRequestCallCount += 1
        if let modifyRequestHandler = modifyRequestHandler {
            return modifyRequestHandler(request)
        }
        fatalError("modifyRequestHandler returns can't have a default value thus its handler must be set")
    }
}

class WebImageUrlSetFinderProtocolMock: WebImageUrlSetFinderProtocol {
    init() { }
    init(webView: WKWebView) {
        self._webView = webView
    }

    private(set) var webViewSetCallCount = 0
    private var _webView: WKWebView! { didSet { webViewSetCallCount += 1 } }
    var webView: WKWebView {
        get { return _webView }
        set { _webView = newValue }
    }

    private(set) var findImageUrlsCallCount = 0
    var findImageUrlsHandler: ((URL, Int, @escaping (Swift.Result<[WebImageUrlSet], WebImageUrlSetFinderError>) -> Void) -> Void)?
    func findImageUrls(inWebSiteAt url: URL, delay milliseconds: Int, completion: @escaping (Swift.Result<[WebImageUrlSet], WebImageUrlSetFinderError>) -> Void) {
        findImageUrlsCallCount += 1
        if let findImageUrlsHandler = findImageUrlsHandler {
            findImageUrlsHandler(url, milliseconds, completion)
        }
    }
}
