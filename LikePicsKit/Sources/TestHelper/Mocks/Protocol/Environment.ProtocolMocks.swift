///
/// @Generated by Mockolo
///

import Domain
import Foundation
import MobileTransition
import Smoothie
import UIKit
import WebKit

@testable import Environment

public class HasNopMock: HasNop {
    public init() {}
}

public class HasRouterMock: HasRouter {
    public init() {}
    public init(router: Router) {
        self._router = router
    }

    public private(set) var routerSetCallCount = 0
    private var _router: Router! { didSet { routerSetCallCount += 1 } }
    public var router: Router {
        get { return _router }
        set { _router = newValue }
    }
}

public class HasClipCommandServiceMock: HasClipCommandService {
    public init() {}
    public init(clipCommandService: ClipCommandServiceProtocol) {
        self._clipCommandService = clipCommandService
    }

    public private(set) var clipCommandServiceSetCallCount = 0
    private var _clipCommandService: ClipCommandServiceProtocol! { didSet { clipCommandServiceSetCallCount += 1 } }
    public var clipCommandService: ClipCommandServiceProtocol {
        get { return _clipCommandService }
        set { _clipCommandService = newValue }
    }
}

public class HasClipQueryServiceMock: HasClipQueryService {
    public init() {}
    public init(clipQueryService: ClipQueryServiceProtocol) {
        self._clipQueryService = clipQueryService
    }

    public private(set) var clipQueryServiceSetCallCount = 0
    private var _clipQueryService: ClipQueryServiceProtocol! { didSet { clipQueryServiceSetCallCount += 1 } }
    public var clipQueryService: ClipQueryServiceProtocol {
        get { return _clipQueryService }
        set { _clipQueryService = newValue }
    }
}

public class HasClipSearchHistoryServiceMock: HasClipSearchHistoryService {
    public init() {}
    public init(clipSearchHistoryService: ClipSearchHistoryService) {
        self._clipSearchHistoryService = clipSearchHistoryService
    }

    public private(set) var clipSearchHistoryServiceSetCallCount = 0
    private var _clipSearchHistoryService: ClipSearchHistoryService! { didSet { clipSearchHistoryServiceSetCallCount += 1 } }
    public var clipSearchHistoryService: ClipSearchHistoryService {
        get { return _clipSearchHistoryService }
        set { _clipSearchHistoryService = newValue }
    }
}

public class HasClipSearchSettingServiceMock: HasClipSearchSettingService {
    public init() {}
    public init(clipSearchSettingService: ClipSearchSettingService) {
        self._clipSearchSettingService = clipSearchSettingService
    }

    public private(set) var clipSearchSettingServiceSetCallCount = 0
    private var _clipSearchSettingService: ClipSearchSettingService! { didSet { clipSearchSettingServiceSetCallCount += 1 } }
    public var clipSearchSettingService: ClipSearchSettingService {
        get { return _clipSearchSettingService }
        set { _clipSearchSettingService = newValue }
    }
}

public class HasCloudAvailabilityServiceMock: HasCloudAvailabilityService {
    public init() {}
    public init(cloudAvailabilityService: CloudAvailabilityServiceProtocol) {
        self._cloudAvailabilityService = cloudAvailabilityService
    }

    public private(set) var cloudAvailabilityServiceSetCallCount = 0
    private var _cloudAvailabilityService: CloudAvailabilityServiceProtocol! { didSet { cloudAvailabilityServiceSetCallCount += 1 } }
    public var cloudAvailabilityService: CloudAvailabilityServiceProtocol {
        get { return _cloudAvailabilityService }
        set { _cloudAvailabilityService = newValue }
    }
}

public class HasImageQueryServiceMock: HasImageQueryService {
    public init() {}
    public init(imageQueryService: ImageQueryServiceProtocol) {
        self._imageQueryService = imageQueryService
    }

    public private(set) var imageQueryServiceSetCallCount = 0
    private var _imageQueryService: ImageQueryServiceProtocol! { didSet { imageQueryServiceSetCallCount += 1 } }
    public var imageQueryService: ImageQueryServiceProtocol {
        get { return _imageQueryService }
        set { _imageQueryService = newValue }
    }
}

public class HasIntegrityValidationServiceMock: HasIntegrityValidationService {
    public init() {}
    public init(integrityValidationService: ClipReferencesIntegrityValidationServiceProtocol) {
        self._integrityValidationService = integrityValidationService
    }

    public private(set) var integrityValidationServiceSetCallCount = 0
    private var _integrityValidationService: ClipReferencesIntegrityValidationServiceProtocol! { didSet { integrityValidationServiceSetCallCount += 1 } }
    public var integrityValidationService: ClipReferencesIntegrityValidationServiceProtocol {
        get { return _integrityValidationService }
        set { _integrityValidationService = newValue }
    }
}

public class HasPasteboardMock: HasPasteboard {
    public init() {}
    public init(pasteboard: Pasteboard) {
        self._pasteboard = pasteboard
    }

    public private(set) var pasteboardSetCallCount = 0
    private var _pasteboard: Pasteboard! { didSet { pasteboardSetCallCount += 1 } }
    public var pasteboard: Pasteboard {
        get { return _pasteboard }
        set { _pasteboard = newValue }
    }
}

public class HasTemporariesPersistServiceMock: HasTemporariesPersistService {
    public init() {}
    public init(temporariesPersistService: TemporariesPersistServiceProtocol) {
        self._temporariesPersistService = temporariesPersistService
    }

    public private(set) var temporariesPersistServiceSetCallCount = 0
    private var _temporariesPersistService: TemporariesPersistServiceProtocol! { didSet { temporariesPersistServiceSetCallCount += 1 } }
    public var temporariesPersistService: TemporariesPersistServiceProtocol {
        get { return _temporariesPersistService }
        set { _temporariesPersistService = newValue }
    }
}

public class HasUserSettingStorageMock: HasUserSettingStorage {
    public init() {}
    public init(userSettingStorage: UserSettingsStorageProtocol) {
        self._userSettingStorage = userSettingStorage
    }

    public private(set) var userSettingStorageSetCallCount = 0
    private var _userSettingStorage: UserSettingsStorageProtocol! { didSet { userSettingStorageSetCallCount += 1 } }
    public var userSettingStorage: UserSettingsStorageProtocol {
        get { return _userSettingStorage }
        set { _userSettingStorage = newValue }
    }
}

public class HasClipPreviewPlayConfigurationStorageMock: HasClipPreviewPlayConfigurationStorage {
    public init() {}
    public init(clipPreviewPlayConfigurationStorage: ClipPreviewPlayConfigurationStorageProtocol) {
        self._clipPreviewPlayConfigurationStorage = clipPreviewPlayConfigurationStorage
    }

    public private(set) var clipPreviewPlayConfigurationStorageSetCallCount = 0
    private var _clipPreviewPlayConfigurationStorage: ClipPreviewPlayConfigurationStorageProtocol! { didSet { clipPreviewPlayConfigurationStorageSetCallCount += 1 } }
    public var clipPreviewPlayConfigurationStorage: ClipPreviewPlayConfigurationStorageProtocol {
        get { return _clipPreviewPlayConfigurationStorage }
        set { _clipPreviewPlayConfigurationStorage = newValue }
    }
}

public class HasTagCommandServiceMock: HasTagCommandService {
    public init() {}
    public init(tagCommandService: TagCommandServiceProtocol) {
        self._tagCommandService = tagCommandService
    }

    public private(set) var tagCommandServiceSetCallCount = 0
    private var _tagCommandService: TagCommandServiceProtocol! { didSet { tagCommandServiceSetCallCount += 1 } }
    public var tagCommandService: TagCommandServiceProtocol {
        get { return _tagCommandService }
        set { _tagCommandService = newValue }
    }
}

public class HasDiskCachesMock: HasDiskCaches {
    public init() {}
    public init(clipDiskCache: DiskCaching, albumDiskCache: DiskCaching, clipItemDiskCache: DiskCaching) {
        self._clipDiskCache = clipDiskCache
        self._albumDiskCache = albumDiskCache
        self._clipItemDiskCache = clipItemDiskCache
    }

    public private(set) var clipDiskCacheSetCallCount = 0
    private var _clipDiskCache: DiskCaching! { didSet { clipDiskCacheSetCallCount += 1 } }
    public var clipDiskCache: DiskCaching {
        get { return _clipDiskCache }
        set { _clipDiskCache = newValue }
    }

    public private(set) var albumDiskCacheSetCallCount = 0
    private var _albumDiskCache: DiskCaching! { didSet { albumDiskCacheSetCallCount += 1 } }
    public var albumDiskCache: DiskCaching {
        get { return _albumDiskCache }
        set { _albumDiskCache = newValue }
    }

    public private(set) var clipItemDiskCacheSetCallCount = 0
    private var _clipItemDiskCache: DiskCaching! { didSet { clipItemDiskCacheSetCallCount += 1 } }
    public var clipItemDiskCache: DiskCaching {
        get { return _clipItemDiskCache }
        set { _clipItemDiskCache = newValue }
    }
}

public class HasImageLoaderSettingsMock: HasImageLoaderSettings {
    public init() {}
    public init(clipDiskCache: DiskCaching, clipThumbnailProcessingQueue: ImageProcessingQueue, albumThumbnailProcessingQueue: ImageProcessingQueue, clipItemThumbnailProcessingQueue: ImageProcessingQueue, temporaryThumbnailProcessingQueue: ImageProcessingQueue, previewProcessingQueue: ImageProcessingQueue, previewPrefetcher: PreviewPrefetchable) {
        self._clipDiskCache = clipDiskCache
        self._clipThumbnailProcessingQueue = clipThumbnailProcessingQueue
        self._albumThumbnailProcessingQueue = albumThumbnailProcessingQueue
        self._clipItemThumbnailProcessingQueue = clipItemThumbnailProcessingQueue
        self._temporaryThumbnailProcessingQueue = temporaryThumbnailProcessingQueue
        self._previewProcessingQueue = previewProcessingQueue
        self._previewPrefetcher = previewPrefetcher
    }

    public private(set) var clipDiskCacheSetCallCount = 0
    private var _clipDiskCache: DiskCaching! { didSet { clipDiskCacheSetCallCount += 1 } }
    public var clipDiskCache: DiskCaching {
        get { return _clipDiskCache }
        set { _clipDiskCache = newValue }
    }

    public private(set) var clipThumbnailProcessingQueueSetCallCount = 0
    private var _clipThumbnailProcessingQueue: ImageProcessingQueue! { didSet { clipThumbnailProcessingQueueSetCallCount += 1 } }
    public var clipThumbnailProcessingQueue: ImageProcessingQueue {
        get { return _clipThumbnailProcessingQueue }
        set { _clipThumbnailProcessingQueue = newValue }
    }

    public private(set) var albumThumbnailProcessingQueueSetCallCount = 0
    private var _albumThumbnailProcessingQueue: ImageProcessingQueue! { didSet { albumThumbnailProcessingQueueSetCallCount += 1 } }
    public var albumThumbnailProcessingQueue: ImageProcessingQueue {
        get { return _albumThumbnailProcessingQueue }
        set { _albumThumbnailProcessingQueue = newValue }
    }

    public private(set) var clipItemThumbnailProcessingQueueSetCallCount = 0
    private var _clipItemThumbnailProcessingQueue: ImageProcessingQueue! { didSet { clipItemThumbnailProcessingQueueSetCallCount += 1 } }
    public var clipItemThumbnailProcessingQueue: ImageProcessingQueue {
        get { return _clipItemThumbnailProcessingQueue }
        set { _clipItemThumbnailProcessingQueue = newValue }
    }

    public private(set) var temporaryThumbnailProcessingQueueSetCallCount = 0
    private var _temporaryThumbnailProcessingQueue: ImageProcessingQueue! { didSet { temporaryThumbnailProcessingQueueSetCallCount += 1 } }
    public var temporaryThumbnailProcessingQueue: ImageProcessingQueue {
        get { return _temporaryThumbnailProcessingQueue }
        set { _temporaryThumbnailProcessingQueue = newValue }
    }

    public private(set) var previewProcessingQueueSetCallCount = 0
    private var _previewProcessingQueue: ImageProcessingQueue! { didSet { previewProcessingQueueSetCallCount += 1 } }
    public var previewProcessingQueue: ImageProcessingQueue {
        get { return _previewProcessingQueue }
        set { _previewProcessingQueue = newValue }
    }

    public private(set) var previewPrefetcherSetCallCount = 0
    private var _previewPrefetcher: PreviewPrefetchable! { didSet { previewPrefetcherSetCallCount += 1 } }
    public var previewPrefetcher: PreviewPrefetchable {
        get { return _previewPrefetcher }
        set { _previewPrefetcher = newValue }
    }
}
